<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:osgi="http://www.springframework.org/schema/osgi"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
       http://www.springframework.org/schema/beans/spring-beans.xsd                      
       http://www.springframework.org/schema/osgi  
       http://www.springframework.org/schema/osgi/spring-osgi.xsd
	   http://www.springframework.org/schema/tx 
	   http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
	   http://www.springframework.org/schema/aop 
       http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">

	<bean name="test" class="com.sitechasia.webx2.petstore.test3.Test3"
		init-method="start" destroy-method="stop">
		<property name="catalogService">
			<ref bean="catalogService" />
		</property>
		<property name="customerService">
			<ref bean="customerService" />
		</property>
		<property name="orderService">
			<ref bean="orderService" />
		</property>
	</bean>

	<!-- 数据源定义 -->
	<bean id="demoDataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="com.mysql.jdbc.Driver" />
		<property name="jdbcUrl"
			value="jdbc:mysql://localhost:3306/jpetstore" />
		<property name="user" value="root" />
		<property name="password" value="admin" />
		<property name="minPoolSize" value="10" />
		<property name="maxPoolSize" value="50" />
		<property name="maxIdleTime" value="1800" />
		<property name="maxStatements" value="50" />
	</bean>

	<!-- Hibernate SessionFactory 定义 -->
	<bean id="demoSessionFactory"
		class="com.sitechasia.webx.orm.LocalSessionFactoryBean">
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					org.hibernate.dialect.HSQLDialect
				</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.generate_statistics">true</prop>
				<prop key="hibernate.max_fetch_depth">2</prop>
				<prop key="hibernate.cache.use_second_level_cache">
					false
				</prop>
			</props>
		</property>
		<property name="dataSource">
			<ref bean="demoDataSource" />
		</property>
	</bean>

	<!-- Catalog DAO Definition: Hibernate implementation -->
	<bean id="catalogDao"
		class="com.sitechasia.webx2.petstore.dao.impl.CatalogDaoHibernateImpl">
		<property name="sessionFactory">
			<ref bean="demoSessionFactory" />
		</property>
	</bean>

	<!--  Customer DAO object: Hibernate implementation -->
	<bean id="customerDao"
		class="com.sitechasia.webx2.petstore.dao.impl.CustomerDaoHibernateImpl">
		<property name="sessionFactory">
			<ref bean="demoSessionFactory" />
		</property>
	</bean>

	<!--  Order DAO object: Hibernate implementation -->
	<bean id="orderDao"
		class="com.sitechasia.webx2.petstore.dao.impl.OrderDaoHibernateImpl">
		<property name="sessionFactory">
			<ref bean="demoSessionFactory" />
		</property>
		<property name="sequenceDao">
			<ref bean="sequenceDao" />
		</property>
	</bean>

	<!--  Sequence DAO object: Jdbc implementation -->
	<bean id="sequenceDao"
		class="com.sitechasia.webx2.petstore.dao.impl.SequenceDaoJdbcImpl">
		<property name="dataSource">
			<ref bean="demoDataSource" />
		</property>
		<!-- 注意 这块比较特殊 一定要配置 -->
		<property name="pageSqlProvider">
			<ref bean="pageSqlProvider" />
		</property>
	</bean>
	<!-- 根据不同的数据库对应SQL分页类 -->
	<bean id="pageSqlProvider"
		class="com.sitechasia.webx.core.dao.jdbc.mysql.MySqlPageSqlProvider">
	</bean>


	<!--  Item DAO object: Hibernate implementation -->
	<bean id="itemDao"
		class="com.sitechasia.webx2.petstore.dao.impl.ItemDaoHibernateImpl">
		<property name="sessionFactory">
			<ref bean="demoSessionFactory" />
		</property>
	</bean>

	<!--  Product DAO object: Hibernate implementation -->
	<bean id="productDao"
		class="com.sitechasia.webx2.petstore.dao.impl.ProductDaoHibernateImpl">
		<property name="sessionFactory">
			<ref bean="demoSessionFactory" />
		</property>
		<property name="commonHibernateDao">
			<ref bean="commonHibernateDao" />
		</property>
		<property name="commonJdbcDao">
			<ref bean="commonJdbcDao" />
		</property>
	</bean>

	<!-- Hibernate公用查询 -->
	<bean id="commonHibernateDao"
		class="com.sitechasia.webx.core.dao.hibernate3.CommonHibernateDao">
		<property name="sessionFactory">
			<ref bean="demoSessionFactory" />
		</property>
	</bean>

	<!-- JDBC公用查询 -->
	<bean id="commonJdbcDao"
		class="com.sitechasia.webx.core.dao.jdbc.CommonJdbcDao">
		<property name="dataSource">
			<ref bean="demoDataSource" />
		</property>
	</bean>


	<!-- dozer -->
	<bean id="dozerBeanMapper"
		class="net.sf.dozer.util.mapping.DozerBeanMapper">
		<property name="mappingFiles">
			<list>
				<value>resource/dozerBeanMapping.xml</value>
			</list>
		</property>
	</bean>
	<!-- DO VO 转换器 -->
	<bean id="dozerConvertUtil"
		class="com.sitechasia.webx2.petstore.utils.DozerConvertUtilImle">
		<property name="dozerBeanMapper">
			<ref bean="dozerBeanMapper" />
		</property>
	</bean>

	<!-- Catalog Service -->
	<bean id="catalogService"
		class="com.sitechasia.webx2.petstore.service.impl.CatalogServiceImpl">
		<property name="catalogDao">
			<ref bean="catalogDao" />
		</property>
		<property name="productDao">
			<ref bean="productDao" />
		</property>
		<property name="itemDao">
			<ref bean="itemDao" />
		</property>
		<property name="dozerConvertUtil">
			<ref bean="dozerConvertUtil" />
		</property>
	</bean>

	<!-- Customer Service -->
	<bean id="customerService"
		class="com.sitechasia.webx2.petstore.service.impl.CustomerServiceImpl">
		<property name="customerDao">
			<ref bean="customerDao" />
		</property>
		<property name="dozerConvertUtil">
			<ref bean="dozerConvertUtil" />
		</property>
	</bean>

	<!-- Order Service -->
	<bean id="orderService"
		class="com.sitechasia.webx2.petstore.service.impl.OrderServiceImpl">
		<property name="orderDao">
			<ref bean="orderDao" />
		</property>
		<property name="dozerConvertUtil">
			<ref bean="dozerConvertUtil" />
		</property>
	</bean>

	<!-- 事务配置 -->
	<tx:advice id="catalogServiceAdvice">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="search*" read-only="true" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>

	<tx:advice id="customerServiceAdvice">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="signon" read-only="true" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>

	<tx:advice id="orderServiceAdvice">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>

	<!-- Cache相关的配置文件 -->
	<bean id="webxCacheProvider"
		class="com.sitechasia.webx.core.cache.ehcache.EhCacheProvider"
		init-method="start" destroy-method="close" />
	<!-- AOP配置 -->
	<bean id="cacheAdvice"
		class="com.sitechasia.webx.core.cache.annotation.CacheAdvisor" />
	<aop:config proxy-target-class="true">
		<!-- 事务相关 -->
		<aop:pointcut id="catalogServiceOperation"
			expression="execution(* mypetstore.service.CatalogService.*(..))" />
		<aop:pointcut id="customerServiceOperation"
			expression="execution(* mypetstore.service.CustomerService.*(..))" />
		<aop:pointcut id="orderServiceOperation"
			expression="execution(* mypetstore.service.OrderService.*(..))" />
		<aop:advisor pointcut-ref="catalogServiceOperation"
			advice-ref="catalogServiceAdvice" />
		<aop:advisor pointcut-ref="customerServiceOperation"
			advice-ref="customerServiceAdvice" />
		<!-- Cache相关 -->
		<aop:advisor pointcut-ref="orderServiceOperation"
			advice-ref="orderServiceAdvice" />
		<aop:aspect id="cacheableAdvice" ref="cacheAdvice" order="0">
			<aop:pointcut id="cachePointCut"
				expression="execution(* mypetstore..*.*Service*.*(..)) and @annotation(com.sitechasia.webx.core.cache.annotation.WebXCache)" />
			<aop:around method="doCache" pointcut-ref="cachePointCut" />
		</aop:aspect>
	</aop:config>

	<!-- OSGI Service -->
	<osgi:service ref="catalogService"
		interface="mypetstore.service.CatalogService" />

	<osgi:service ref="customerService"
		interface="mypetstore.service.CustomerService" />

	<osgi:service ref="orderService"
		interface="mypetstore.service.OrderService" />

</beans>